#!/usr/bin/env bash

script_dir="$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)"
dry="0"
if [ -z "$XDG_CONFIG_HOME" ]; then
  echo "no xdg config hom"
  echo "using ~/.config"
  XDG_CONFIG_HOME=$HOME/.config
fi

#if [ -z "$DEV_ENV" ]; then
#  echo "env var DEV_ENV needs to be present"
#  exit 1
#fi

while [[ $# > 0 ]]; do
  if [[ "$1" == "--dry" ]]; then
    dry="1"
  elif [[ -n "${platform:-}" ]]; then
    commitMsg="$1"
  else
    platform="$1"
  fi
  shift
done

echo "platform=$platform"
echo "commitMsg=$commitMsg"

log() {
  if [[ $dry == "1" ]]; then
    echo "[DRY_RUN]: $@"
  else
    echo "$@"
  fi
}

execute() {
  log "execute: $@"
  if [[ $dry == "1" ]]; then
    return
  fi

  "$@"
}

log "--------- dev-env ---------"

cd $script_dir &>/dev/null

preserve_git_dir() {
  local srcDir="$1"
  local dstDir="$2"
  local tmp_dir="$(mktemp -d)" # create a random temp directory in system default /tmp
  log ".git dir exists. Preserving to $tmp_dir"
  execute cp -r "$dstDir/.git" "$tmp_dir/"
  execute rm -rf "$dstDir"
  execute cp -r "$(realpath "$srcDir")" "$dstDir"
  execute cp -r "$tmp_dir/.git" "$dstDir"
  log ".git directory restored"
  execute rm -rf "$tmp_dir"
}

create_timestamp() {
  echo "$(date +"%Y%m%d%H%M%S")"
}

get_commit_msg() {
  if [[ -n "${commitMsg:-}" ]]; then
    echo "$commitMsg"
  else
    echo "sync-$(create_timestamp)"
  fi
}

commit_changes() {
  log "committing changes"
  pushd "$1" &>/dev/null
  if ! git diff --quiet || ! git diff --cached --quiet; then
    execute git commit -am "$(get_commit_msg)"
    log "changes committed"
  else
    log "no changes to commit"
  fi
  popd &>/dev/null
}

copy_dir() {
  pushd $1 &>/dev/null
  local to=${2%/}
  local dirs=$(find . -maxdepth 1 -mindepth 1 -type d)
  for dir in $dirs; do
    local d=${dir#./}
    if [[ -d $to/$d/.git ]]; then
      preserve_git_dir "$dir" "$to/$d"
      commit_changes "$to/$d"
    else
      execute rm -rf "$to/$d"
      execute cp -r "$(realpath "$dir")" "$to/$d"
    fi
  done
  popd &>/dev/null
}

copy_platform_files() {
  pushd $1 &>/dev/null
  local to=${2%/}
  local files=$(find . -maxdepth 1 -mindepth 1 -type f)
  for file in $files; do
    local filename=$(basename $file)
    execute rm -f "$to/$filename"
    execute cp "$(realpath "$file")" "$to/$filename"
  done
  popd &>/dev/null
}

copy_platform() {
  pushd $1 &>/dev/null
  local to=${2%/}
  local dirs=$(find . -maxdepth 1 -mindepth 1 -type d)
  for dir in $dirs; do
    local d=${dir#./}
    copy_platform_files "$dir" "$to/$d"
    if [[ -d "$to/$d/.git" ]]; then
      commit_changes "$to/$d"
    fi
  done
  popd &>/dev/null
}

copy_file() {
  from=$1
  to=$2
  name=$(basename $from)
  execute rm -f "$to/$name"
  execute cp "$(realpath "$from")" "$to/$name"
}

execute cp $HOME/.bashrc "$HOME/.bashrc.bak$(create_timestamp)"
copy_file env/general/bash/.bashrc $HOME
copy_dir env/general/.config "$XDG_CONFIG_HOME"
copy_dir env/general/.local/share "$HOME/.local/share/"
copy_file env/general/.config/starship.toml "$XDG_CONFIG_HOME"
copy_platform "env/$platform/.config" "$XDG_CONFIG_HOME"

if [[ $dry == "0" ]]; then
  source ~/.bashrc
  hyprctl reload
fi

# Not sure if I want to do that by default
#if [[ $dry == "0" ]]; then
#  hyprctl reload
#fi
